
macrodefs:: [Macro]
--
--
-- macrodefs are just list of [(macrostring,[(fieldname,field,val)] )
--   macroname is what macro will be invoke with
--  [(fieldname,field, val)] = field name,
--                    list of fields = set of ints, val = int or string
--       if val is int, field will get val of int
--       if val is string, field will get lookup val parmTable
--       where parmTable is made up of the parms that are at the end
--       of the macro invocation in parens  e.g.  NAD(CA+3), puts CA+3 in the
--          table as [("$0", CA+3)]

macrodefs = [ ("BEN 9 NOT INT DIV 0 TRAP",[ ( "ben0",ben0, Ival 0), ("ben1",ben1,Ival 2)] ),
 ("BEN 9 CNTR EQ 0",[( "ben0",ben0, Ival 0), ("ben1",ben1, Ival 0 )] ),
 ("BEN 9 32 X 32", [ ( "ben0",ben0, Ival 0), ("ben1",ben1, Ival 3)] ),
 ("BEN 9 NOP", [ ( "ben0",ben0, Ival 0), ("ben1",ben1, Ival 4)] ),
 ("BEN 9 NOT EXR 15", [ ( "ben0",ben0,Ival 0), ("ben1",ben1,Ival 5)] ),
 ("BEN 9 NOT FRACY 00", [ ( "ben0",ben0,Ival 0), ("ben1",ben1,Ival 6)] ),
 ("BEN 9 NOT FLAG 1", [ ( "ben0",ben0, Ival 0), ("ben1",ben1,Ival 7)] ),
 ("BEN 9 NOT OV TRAP", [ ( "ben0",ben0, Ival 1), ("ben1",ben1, Ival 0)] ),
 ("BEN 9 NOT UN TRAP", [ ( "ben0",ben0, Ival 1), ("ben1",ben1,Ival 1)] ),
 ("BEN 9 NOT DZ TRAP", [ ( "ben0",ben0, Ival 1), ("ben1",ben1,Ival 2)] ),
 ("BEN 9 NOT IV TRAP", [ ( "ben0",ben0, Ival 1), ("ben1",ben1,Ival 3)] ),
 ("BEN 9 NOT IX TRAP", [ ( "ben0",ben0, Ival 1), ("ben1",ben1, Ival 4)] ),
 ("BEN 9 NOT UNORDERED REL", [ ( "ben0",ben0, Ival 1), ("ben1",ben1, Ival 5)] ),
 ("BEN 9 MAG SUB", [ ( "ben0",ben0, Ival 1), ("ben1",ben1,Ival 6)] ),
 ("BEN 9 NOT IX TRAP COND AND IX TRAP", [ ( "ben0",ben0, Ival 1), ("ben1",ben1,Ival 7)] ),
 ("BEN 9 NOT LIVE IX COND", [ ( "ben0",ben0, Ival 2), ("ben1",ben1, Ival 0)] ),
 ("BEN 9 NOT PREC MSB", [ ( "ben0",ben0, Ival 2), ("ben1",ben1,Ival 1)] ),
 ("BEN 9 NOT FLUSH TO ZERO", [ ( "ben0",ben0, Ival  2), ("ben1",ben1,Ival 2)] ),
 ("BEN 9 NOT SIGN YR", [ ( "ben0",ben0, Ival 2), ("ben1",ben1, Ival 3)] ),
 ("BEN 9 NOT FRACX F BIT", [ ( "ben0",ben0, Ival 2), ("ben1",ben1,Ival 4)] ),
 ("BEN 9 NOT PACK I BIT", [ ( "ben0",ben0,Ival 2), ("ben1",ben1,Ival 5)] ),
 ("BEN 9 MALU EQ 0", [ ( "ben0",ben0, Ival 2), ("ben1",ben1,Ival 6)] ),
 ("BEN 9 NOT XNO", [ ( "ben0",ben0, Ival 2), ("ben1",ben1, Ival 7)] ),
 ("BEN 9 NOT EX0 18", [ ( "ben0",ben0, Ival 3), ("ben1",ben1,Ival 0)] ),
 ("BEN 9 NOT EX0 19", [ ( "ben0",ben0, Ival 3), ("ben1",ben1,Ival 1)] ),
 ("BEN 9 NOT POST NORM", [ ( "ben0",ben0, Ival 3), ("ben1",ben1,Ival 2)] ),
 ("BEN 9 FRAC OVFL", [ ( "ben0",ben0, Ival  3), ("ben1",ben1, Ival 3)] ),
 ("BEN 9 NOT MUL OR DIV 99", [ ( "ben0",ben0, Ival  3), ("ben1",ben1, Ival 4)] ),
 ("BEN 9 MALU 99-63 EQ 0", [ ( "ben0",ben0, Ival  3), ("ben1",ben1, Ival 5)] ),
 ("BEN 9 NOT SIGN EYL", [ ( "ben0",ben0, Ival  3), ("ben1",ben1, Ival 6)] ),
 ("BEN 9 MEM OP", [ ( "ben0",ben0, Ival  3), ("ben1",ben1, Ival 7)] ),
 ("BEN 8 EALU 00", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 0)] ),
 ("BEN 9 EALU EQ 0", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 0)] ),
 ("BEN 8 FLAG 1", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 1)] ),
 ("BEN 9 NOT FLAG 2", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 1)] ),
 ("BEN 8 RMODE MSB", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 2)] ),
 ("BEN 9 NOT RMODE LSB", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 2)] ),
 ("BEN 8 PREC MSB", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 3)] ),
 ("BEN 9 NOT EXP OVLF", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 3)] ),
 ("BEN 8 EXP UNFL", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 4)] ),
 ("BEN 9 NOT EXP OVFL", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 4)] ),
 ("BEN 8 SPARE 3", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 5)] ),
 ("BEN 9 NOT INT OVFL", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 5)] ),
 ("BEN 8 EX1 OR EY1 26", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 6)] ),
 ("BEN 9 NOT EX0 OR EY0", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 6)] ),
 ("BEN 8 XN0", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 7)] ),
 ("BEN 9 NOT YN0", [ ( "ben0",ben0, Ival  4), ("ben1",ben1, Ival 7)] ),
 ("BEN 8 XINF", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 0)] ),
 ("BEN 9 NOT YINF", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 0)] ),
 ("BEN 8 XNAN", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 1)] ),
 ("BEN 9 NOT YNAN", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 1)] ),
 ("BEN 8 EX1 OR EY1 2A", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 2)] ),
 ("BEN 9 NOT EX0 AND EY0", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 2)] ),
 ("BEN 8 EXT PREC", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 3)] ),
 ("BEN 9 ALU DATA NOT VALID", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 3)] ),
 ("BEN 8 NOT FADD TYPE", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 4)] ),
 ("BEN 9 NOT MUL", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 4)] ),
 ("BEN 8 EXR 00", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 5)] ),
 ("BEN 9 SPARE 4", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 5)] ),
 ("BEN 8 SPARE 5", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 6)] ),
 ("BEN 9 NOT DEC CARRY OUT", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 6)] ),
 ("BEN 8 SPARE 6", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 7)] ),
 ("BEN 9 NOT ROUNDED", [ ( "ben0",ben0, Ival  5), ("ben1",ben1, Ival 7)] ),
 ("BEN 7 ALUOP 2", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 0)] ),
 ("BEN 8 ALUOP 3", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 0)] ),
 ("BEN 9 NOT ALUOP 4", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 0)] ),
 ("BEN 7 XN0", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 1)] ),
 ("BEN 8 EY0 39", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 1)] ),
 ("BEN 9 NOT FY0 39", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 1)] ),
 ("BEN 7 EX1", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 2)] ),
 ("BEN 8 EX0", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 2)] ),
 ("BEN 9 NOT FX0", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 2)] ),
 ("BEN 7 EY1", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 3)] ),
 ("BEN 8 EY0 3C", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 3)] ),
 ("BEN 9 NOT FY0 3C", [ ( "ben0",ben0, Ival  7), ("ben1",ben1, Ival 3)] ),
 ("SIGN ADD", [ ( "sign",sign, Ival  0) ]),
 ("SIGN MUL OR DIV", [ ( "sign",sign, Ival  1) ]),
 ("SIGN X OP", [ ( "sign",sign, Ival  2) ]),
 ("SIGN Y OP", [ ( "sign",sign, Ival  3) ]),
 ("SIGN ZERO", [ ( "sign",sign, Ival  4) ]),
 ("SIGN ONE", [ ( "sign",sign, Ival  5) ]),
 ("SIGN XR", [ ( "sign",sign, Ival  6) ]),
 ("SIGN RMODE", [ ( "sign",sign, Ival  7) ]),
 ("EXMX EYL", [ ( "exmx",exmx, Ival  0) ]),
 ("EXMX ADD", [ ( "exmx",exmx, Ival  0) ]),
 ("EXMX EXL", [ ( "exmx",exmx, Ival  1) ]),
 ("EXMX ZERO", [ ( "exmx",exmx, Ival  2) ]),
 ("EXMX EXR", [ ("exmx",exmx, Ival  3) ]),
 ("EYMX EYR", [ ( "eymx",eymx, Ival  0) ]),
 ("EYMX PRIO ENCODE", [ ( "eymx",eymx, Ival  1) ]),
 ("EYMX EMIT", [ ( "eymx",eymx, Ival  2),("emit",emit, Sval "$0") ]), 
 ("EYMX EMIT SHORT", [ ( "eymx",eymx, Ival 2),("emit_right_three",emit_right_three,Sval "$0") ]),
 ("EYMX EYL", [ ("exmx",exmx, Ival 3) ]),
 ("EYMX ZERO", [("zero_eymx",zero_eymx, Ival 0 )]),
 ("EALU HALF X", [("ealu",ealu,Ival 0)]),
 ("EALU X+Y", [("ealu",ealu,Ival 1)]),
 ("EALU PASS X", [("ealu",ealu,Ival 1),("zero_eymx",zero_eymx, Ival 0)]),
 ("EALU PASS Y", [("ealu",ealu,Ival 1),("exmx",exmx,Ival 2)]),
 ("EALU X-Y", [("ealu",ealu,Ival 2)]),
 ("EALU HW", [("ealu",ealu,Ival 3),("zero_eymx",zero_eymx,Ival 0)]),
 ("EALU HW NOT EYMX ZERO", [("ealu",ealu,Ival 3)]),
 ("EALU ZERO", [("ealu",ealu, Ival 0),("exmx",exmx,Ival 2)]),
 ("RF RD SEL FD RAM", [("rf_rd_sel",rf_rd_sel, Ival 0)]),
 ("RF RD SEL HW", [("rf_rd_sel",rf_rd_sel,Ival 1)]),
 ("RF RD SEL EMIT", [("rf_rd_sel",rf_rd_sel,Ival 2),("flipr",flipr,Ival 1)]),
 ("RFX RD", [("rf_rd_sel",rf_rd_sel,Ival 2),("flipr",flipr,Ival 1),("rfx_rd_addr",rfx_rd_addr,Sval "$0")]),
 ("RF RD SEL CNTR", [("rf_rd_sel",rf_rd_sel,Ival 3)]),
 ("RF WR SEL EMIT", [("rf_wr_sel",rf_wr_sel, Ival 0),("flipw",flipw,Ival 13)]),
 ("RFX WR", [("rf_wr_sel",rf_wr_sel, Ival 0),("rfx_wr_addr",rfx_wr_addr,Sval "$0"),("flipw",flipw,Ival 1)]),
 ("RFX WR SEL CNTR", [("rf_wr_sel",rf_wr_sel,Ival 1)]),
 ("FLOW SEL XY", [("flow_sel",flow_sel, Ival 0)]),
 ("FLOW SEL XC", [("flow_sel",flow_sel,Ival 1)]),
 ("FLOW SEL CY", [("flow_sel",flow_sel,Ival 2)]),
 ("FLOW SEL CX", [("flow_sel",flow_sel,Ival 3)]),
 ("LD MUL CNTR 0", [("msc_a",msc_a,Ival 1),("mul_cnt_msb",mul_cnt_msb, Ival 0),("residual",residual, Ival 0),("override_ralu_field",override_ralu_field, Ival 0)]),
 ("LD MUL CNTR 1", [("msc_a",msc_a,Ival 1),("mul_cnt_msb",mul_cnt_msb, Ival 0),("residual",residual,Ival 1),("override_ralu_field",override_ralu_field, Ival 0)]),
 ("LD MUL CNTR 2", [("msc_a",msc_a,Ival 1),("mul_cnt_msb",mul_cnt_msb, Ival 0),("residual",residual,Ival 2),("override_ralu_field",override_ralu_field, Ival 0)]),
 ("LD MUL CNTR 3", [("msc_a",msc_a,Ival 1),("mul_cnt_msb",mul_cnt_msb, Ival 0),("residual",residual,Ival 3),("override_ralu_field",override_ralu_field, Ival 0)]),
 ("RESET MUL", [("msc_a",msc_a,Ival 1)]),
 ("SET FRC FLAG LO LAT A", [("msc_a",msc_a,Ival 2)]),
 ("MSC A SPARE 1", [("msc_a",msc_a,Ival 3)]),
 ("ENABLE RF WR", [("msc_a",msc_a,Ival 4)]),
 ("CALL", [("msc_a",msc_a,Ival 6)]),
 ("READ", [("msc_a",msc_a,Ival 11)]),
 ("ALLOW HW SET IX", [("msc_a",msc_a,Ival 12)]),
 ("PACK EXT FRAC", [("msc_a",msc_a,Ival 13)]),
 ("HW RMXS", [("msc_b",msc_b, Ival 0)]),
 ("SET SQR LAT", [("msc_b",msc_b,Ival 1)]),
 ("SET FRC FLAG LO LAT B", [("msc_b",msc_b,Ival 2)]),
 ("SET FRC FLAG LO LAT", [("msc_b",msc_b,Ival 2)]),
 ("FRC FLAG HI", [("msc_b",msc_b,Ival 3)]),
 ("FRC V BIT HI", [("msc_b",msc_b,Ival 4)]),
 ("FRC FIRST DECODE", [("frcfirst",frcfirst,Ival 1)]),
 ("LD BOTH PREC REG 0", [("msc_b",msc_b,Ival 6),("residual",residual,Sval "$0"),("rf_wr_sel",rf_wr_sel, Ival 0)]),
 ("LD BOTH PREC REG 1", [("msc_b",msc_b,Ival 6),("residual",residual,Sval "$0"),("rf_wr_sel",rf_wr_sel,Ival 1)]),
 ("LD BOTH PREC REG 2", [("msc_b",msc_b,Ival 7),("residual",residual,Sval "$0"),("rf_wr_sel",rf_wr_sel, Ival 0)]),
 ("LD BOTH PREC REG 3", [("msc_b",msc_b,Ival 7),("residual",residual,Sval "$0"),("rf_wr_sel",rf_wr_sel,Ival 1)]),
 ("FRC IR 02", [("msc_b",msc_b,Ival 11)]),
 ("LD SEQ CNTR", [("msc_b",msc_b,Ival 12),("emit_right_half",emit_right_half,Sval "$0"),("eymx",eymx,Ival 2),("ealu",ealu,Ival 1),("exmx",exmx,Ival 2)]),
 ("LD SEQ CNTR NOT EMIT", [("msc_b",msc_b,Ival 12)]),
 ("LD RF CNTRS", [("msc_b",msc_b,Ival 13)]),
 ("INC RD CNTRS", [("msc_b",msc_b,Ival 14)]),
 ("LD AND INCR RF CNTRS", [("msc_b",msc_b,Ival 15)]),
 ("SET OV", [("msc_a",msc_a,Ival 10),("msc_c",msc_c, Ival 0)]),
 ("SET UN", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 1)]),
 ("SET IV", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 2)]),
 ("SET DZ", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 3)]),
 ("SET IX", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 4)]),
 ("CLK DENORM STICK BIT", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 5)]),
 ("SET INTEGER OV", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 6)]),
 ("SET INTEGER DZ", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 7)]),
 ("SET FSUB LAT", [("flow_xtos",flow_xtos, Ival 0)]),
 ("SET FSUBR LAT", [("enable_div_misc",enable_div_misc, Ival 0)]),
 ("WR STATUS", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 10)]),
 ("SET SIGN MSB LAT", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 11)]),
 ("ASCII LAT", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 13),("maluzero",maluzero,Ival 1)]),
 ("ASCII ASIGN C BIT", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 14)]),
 ("CLR DENORM STICKY BIT", [("msc_a",msc_a,Ival 10),("msc_c",msc_c,Ival 15)]),
 ("RD STATUS", [("msc_b",msc_b,Ival 9),("msc_d",msc_d, Ival 0)]),
 ("MICRO RESET", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 1)]),
 ("MSC D SPARE 0", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 2)]),
 ("TRAP ALU", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 2)]),
 ("ZERO RALU CNTRLS", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 3)]),
 ("FRC PACK 00 HI", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 4)]),
 ("FRC HIDDEN BITS", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 5)]),
 ("SET MUL LAT", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 6)]),
 ("FRC QUO BITS", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 7),("quo_bits",quo_bits,Sval"$0")]),
 ("CLA INIT REM", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 7)]),
 ("LD RMODE REG", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 9),("residual",residual,Sval "$0")]),
 ("LD MICROFLAGS", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 10),("residual",residual,Sval "$0")]),
 ("LD RALU CNTL ZERO", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 11),("residual",residual, Ival 0)]),
 ("LD RALU CNTL HALF X", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 11),("residual",residual,Ival 1)]),
 ("LD RALU CNTL X", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 11),("residual",residual,Ival 2)]),
 ("LD RALU CNTL MINUS X", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 11),("residual",residual,Ival 3)]),
 ("ASCII CLR C BIT", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 12)]),
 ("RESET MUL LAT", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 14)]),
 ("SET XI ZERO LAT", [("msc_b",msc_b,Ival 9),("msc_d",msc_d,Ival 15)]),
 ("DIV CLK QB", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 14)]),
 ("DIV CLK Q", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 13)]),
 ("DIV CLK RS", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 11)]),
 ("DIV CLK D", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 7)]),
 ("DIV CLK QB Q RS", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 8)]),
 ("DIV CLK QB RS", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 10)]),
 ("DIV CLK RS D", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 3)]),
 ("DIV CLK QB D", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 6)]),
 ("DIV CLK QB Q", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 12)]),
 ("DIV CLK Q QB", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 12)]),
 ("DIV CLK Q RS", [("msc_a",msc_a,Ival 9),("div_clk",div_clk,Ival 9)]),
 ("DIV LD R CLR S MZ", [("enable_div_misc",enable_div_misc, Ival 0),("residual",residual,Ival 2),("malu",malu, Ival 0)]),
 ("DIV LD D CLR Q", [("enable_div_misc",enable_div_misc, Ival 0),("residual",residual,Ival 3),("maluzero",maluzero,Ival 1)]),
 ("DIV LD R CLR S", [("enable_div_misc",enable_div_misc, Ival 0),("residual",residual,Ival 2),("maluzero",maluzero,Ival 1)]),
 ("DIV LD S CLR R", [("enable_div_misc",enable_div_misc, Ival 0),("residual",residual,Ival 1),("maluzero",maluzero,Ival 1)]),
 ("DIV Q OUT CLR D", [("enable_div_misc",enable_div_misc, Ival 0),("residual",residual, Ival 0)]),
 ("CLEAR Q", [("enable_div_misc",enable_div_misc, Ival 0),("residual",residual,Ival 3)]),
 ("CLEAR S", [("enable_div_misc",enable_div_misc, Ival 0),("residual",residual,Ival 2)]),
 ("CLEAR R", [("enable_div_misc",enable_div_misc, Ival 0),("residual",residual,Ival 1)]),
 ("CLEAR D", [("enable_div_misc",enable_div_misc, Ival 0),("residual",residual, Ival 0)]),
 ("MALU ZERO", [("malu",malu, Ival 0),("shift_l_r",shift_l_r, Ival 0),("shift_ge_64",shift_ge_64,Ival 1)]),
 ("ASCII TO INTEGER", [("malu",malu,Ival 1)]),
 ("ASCII X+Y", [("malu",malu,Ival 2)]),
 ("ASCII X-Y", [("malu",malu,Ival 3)]),
 ("MALU PASS Y", [("malu",malu,Ival 5)]),
 ("MALU Y-X", [("malu",malu,Ival 6)]),
 ("MALU Y+X", [("malu",malu,Ival 7)]),
 ("ALLOW FIRST DECODE", [("afd",afd, Ival 0)]),
 ("RETURN", [("ret",ret,Ival 1)]),
 ("FPA DONE NEXT", [("fdn",fdn,Ival 1)]),
 ("FPA DATA VALID", [("fdv",fdv,Ival 1)]),
 ("LAT X", [("latx",latx, Ival 0),("msc_a",msc_a,Ival 11)]),
 ("LAT Y", [("laty",laty, Ival 0),("msc_a",msc_a,Ival 11)]),
 ("EXL", [("exl_field",exl_field, Ival 0),("msc_a",msc_a,Ival 11)]),
 ("EYL", [("eyl_field",eyl_field, Ival 0),("msc_a",msc_a,Ival 11)]),
 ("EXR", [("exr_field",exr_field, Ival 0)]),
 ("EYR", [("eyr_field",eyr_field, Ival 0)]),
 ("SHIFT R EXP DIFF", [("shift",shift, Ival 0)]),
 ("SHIFT L EALU", [("shift",shift,Ival 1),("override_ralu_field",override_ralu_field, Ival 0)]),
 ("SHIFT R EALU", [("shift",shift,Ival 1),("override_ralu_field",override_ralu_field,Ival 1)]),
 ("SHIFT L EMIT", [("shift",shift,Ival 2),("shift_l_r",shift_l_r, Ival 0),("shift_dist",shift_dist,Sval "$0")]),
 ("SHIFT R EMIT", [("shift",shift,Ival 2),("shift_l_r",shift_l_r,Ival 1),("shift_dist",shift_dist,Sval "$0")]),
 ("SHIFT PASS", [("shift",shift,Ival 2),("shift_l_r",shift_l_r, Ival 0),("shift_dist",shift_dist, Ival 0)]),
 ("SHIFT L PRIO ENCODE", [("shift",shift,Ival 3)]),
 ("SHIFT ZERO", [("shift_l_r",shift_l_r, Ival 0),("shift_ge_64",shift_ge_64,Ival 1)]),
 ("IA DE", [("wire_or",wire_or,Ival 1),("msc_b",msc_b,Ival 10)]),
 ("PROD OE", [("wire_or",wire_or,Ival 2),("msc_b",msc_b,Ival 10)]),
 ("MUL OE", [("wire_or",wire_or,Ival 4),("msc_b",msc_b,Ival 10)]),
 ("DIV OE", [("wire_or",wire_or,Ival 8),("msc_b",msc_b,Ival 10)]),
 ("WIRE OR ZERO", [("wire_or",wire_or, Ival 0),("msc_b",msc_b,Ival 10)]),
 ("INPUT LAT", [("input_lat_field",input_lat_field, Ival 0)]),
 ("FLOW X TO S", [("flow_xtos",flow_xtos,Ival 1)]),
 ("FLOW X TO T", [("flow_xtos",flow_xtos, Ival 0)]),
 ("FLOW Y TO S", [("flow_xtos",flow_xtos, Ival 0)]),
 ("FLOW Y TO T", [("flow_xtos",flow_xtos,Ival 1)]),
 ("ENABLE EXCEPTIONS", [("enable_excp",enable_excp, Ival 0)]),
 ("OVERRIDE RALU", [("override_ralu_field",override_ralu_field, Ival 0)]),
 ("RALU ZERO", [("override_ralu_field",override_ralu_field, Ival 0),("malu",malu, Ival 0)]),
 ("MARK", [("mark_bit",mark_bit, Ival 0)]),
 ("HALT", [("mark_bit",mark_bit, Ival 0)]),
 ("TWO WORDS TO ALU AFTER TRAP", [("fdn",fdn, Ival 0),("fdv",fdv,Ival 1)]),
 ("EXCP MSG TO ALU AFTER TRAP", [("fdn",fdn,Ival 1),("fdv",fdv, Ival 0)]),
 ("ONE WORD TO ALU AFTER TRAP", [("fdn",fdn,Ival 1),("fdv",fdv,Ival 1)]),
 ("FREM NOP TERMINATION", [("fdn",fdn, Ival 0),("fdv",fdv,Ival 1)]),
 ("FREM QUOTIENT DATA VALID", [("fdn",fdn,Ival 1),("fdv",fdv,Ival 1)]),
 ("FREM REMAINDER DATA VALID", [("fdv",fdv,Ival 1)]),
 ("EMIT RIGHT HALF", [("emit_right_half",emit_right_half,Sval "$0")]),
 ("NAD",[("nad",nad,Sval "$0")]) ]
